import requests
import datadog_helper
from pprint import pprint

from datetime import timedelta, timezone
import datetime

import dydb_helper
import slack_helper

datadog_alerts      = [
    {
        "no": 1,
        "monitor_id": 78571814,
        "name": "[P2][DB] MariaDB ({{name.name}})  Freeable memory({{value}}) is too low",
        "dynamodb_key": "DB-MARIADDB-01",
        "query": "avg(last_5m):avg:aws.rds.freeable_memory{dbinstanceidentifier:*,dbinstanceclass:db.t3.medium,engine:mariadb,!dbinstanceidentifier:sksh-argos-p-aurora-mysql-master-rci,!dbinstanceidentifier:sksh-argos-p-aurora-mysql-reader-rci} by {name} < 210000000"
    },
    {
        "no": 2,
        "monitor_id": 78571996,
        "name": "[P2][DB] MariaDB {{dbinstanceidentifier.name}} Max connections over 200(Max:450)",
        "dynamodb_key": "DB-MARIADDB-02",
        "query": "avg(last_5m):avg:aws.rds.database_connections{dbinstanceidentifier:sksh-argos-p-rds-mariadb*} by {name} > 200"
    },
    {
        "no": 3,
        "monitor_id": 78572606,
        "name": "[P2][DB] MariaDB CPU Utilization > 80%",
        "dynamodb_key": "DB-MARIADB-03",
        "query": "avg(last_5m):avg:aws.rds.cpuutilization{dbinstanceidentifier:sksh-argos-p-rds-mariadb-*} by {name} > 80"
    },
    {
        "no": 4,
        "monitor_id": 78754921,
        "name": "[P2][Container] EKS Node 메모리 사용률이 높음",
        "dynamodb_key": "CONTAINER-EKSNODE-01",
        "query": "avg(last_5m):avg:kubernetes.memory.usage_pct{kube_namespace:argos} by {eks_nodegroup-name,name} * 100 > 95"
    },
    {
        "no": 5,
        "monitor_id": 114359745,
        "name": "[P2][CSP] SQS SDQ CONGESTION",
        "dynamodb_key": "CSP-SQS-01",
        "query": "avg(last_5m):avg:aws.sqs.approximate_number_of_messages_visible{queuename:sdq-*} by {queuename} > 3000"
    },
    {
        "no": 6,
        "monitor_id": 114723427,
        "name": "[P1][System] Host OS 사용 불가 {{host.name}}",
        "dynamodb_key": "SYSTEM-EC2-01",
        "query": "avg(last_15m):anomalies(avg:aws.ec2.status_check_failed_system{aws_account:123456789012}, 'basic', 2, direction='both', interval=60, alert_window='last_15m', count_default_zero='true') >= 1"
    },
    {
        "no": 7,
        "monitor_id": 115934937,
        "name": "[P2][Container]EKS({{event.tags.kube_cluster_name}} POD OOMKilled ({{event.tags.kube_namespace}}/{{event.tags.pod_name}})",
        "dynamodb_key": "CONTAINER-OOM-02",
        "query": "events(\"tags:\\\"kube_cluster_name:*\\\" source:docker OOM\").rollup(\"count\").by(\"kube_cluster_name\").last(\"1m\") >= 1"
    },
    {
        "no": 8,
        "monitor_id": 116266815,
        "name": "[P2][Container] EKS({{cluster_name.name}} - {{eks_nodegroup-name.name}}.{{name.name}}) Network RX Error",
        "dynamodb_key": "CONTAINER-SKCC-08",
        "query": "avg(last_5m):sum:kubernetes.network.rx_dropped{cluster_name:*} by {eks_nodegroup-name,name,cluster_name} > 10"
    },
    {
        "no": 9,
        "monitor_id": 116266999,
        "name": "[P2][Container] EKS({{cluster_name.name}} - {{eks_nodegroup-name.name}}.{{name.name}} ) Network TX Drop",
        "dynamodb_key": "CONTAINER-TX_DROP-01",
        "query": "avg(last_5m):avg:kubernetes.network.tx_dropped{cluster_name:sksh-argos-p-*} by {eks_nodegroup-name,name,cluster_name} >= 1"
    },
    {
        "no": 10,
        "monitor_id": 116267673,
        "name": "[P2][DB] MySQL dml latency over 1800 seconds",
        "dynamodb_key": "DB-MYSQL_DML-01",
        "query": "max(last_10m):avg:aws.rds.dmllatency{dbclusteridentifier:sksh-argos-p-aurora-mysql*} by {name} > 1800000"
    },
    {
        "no": 11,
        "monitor_id": 116270163,
        "name": "[P2][DB] MySQL {{dbinstanceidentifier.name}} MAX CPU Utilization is too high",
        "dynamodb_key": "DB-MYSQL_CPU-01",
        "query": "avg(last_5m):max:aws.rds.cpuutilization{dbinstanceidentifier:sksh-argos-p-aurora-mysql*} by {name} >= 80"
    },
    {
        "no": 12,
        "monitor_id": 116272282,
        "name": "[P3][DB] MySQL {{hostname.name}} 사용 가능한 메모리가 너무 적습니다.(10% 미만)",
        "dynamodb_key": "DB-MYSQL_MEM-01",
        "query": "min(last_10m):avg:aws.rds.freeable_memory{dbinstanceidentifier:sksh-argos-p-aurora-mysql-*} by {hostname} < 10737418240"
    },
    {
        "no": 13,
        "monitor_id": 116273823,
        "name": "[P2][DB] ARGOS MySQL Local Temporary storage usage > 90%",
        "dynamodb_key": "DB-MYSQL_TEMP_STR-01",
        "query": "min(last_10m):avg:aws.rds.free_local_storage{dbinstanceidentifier:sksh-argos-p-aurora-mysql*} by {dbinstanceidentifier} < 1073741824"
    },
    {
        "no": 14,
        "monitor_id": 116274025,
        "name": "[P2][DB] MySQL {{dbinstanceidentifier.name}}  Aurora engine uptime alarm",
        "dynamodb_key": "DB-MYSQL_UPTIME-01",
        "query": "min(last_15m):avg:aws.rds.engine_uptime{hostname:sksh-argos-p-aurora-mysql*} by {hostname} <= 90"
    },
    {
        "no": 15,
        "monitor_id": 116276784,
        "name": "[P2][DB] MySQL({{name.name}}) ddl latency over 600 seconds",
        "dynamodb_key": "DB-MYSQL_DDL_LATENCY-01",
        "query": "max(last_10m):avg:aws.rds.ddllatency{dbinstanceidentifier:sksh-argos-p-aurora-mysql*} by {name} > 600000"
    },
    {
        "no": 16,
        "monitor_id": 116304459,
        "name": "[P2][Container] EKS({{kube_cluster_name.name}}) - Deploy Daemonset Check {{kube_namespace.name}}/{{kube_daemon_set.name}}",
        "dynamodb_key": "CONTAINER-DAEMONSET-01",
        "query": "avg(last_5m):avg:kubernetes_state.daemonset.desired{kube_cluster_name:*} by {kube_daemon_set,kube_namespace,kube_cluster_name} - avg:kubernetes_state.daemonset.ready{kube_cluster_name:*} by {kube_daemon_set,kube_namespace,kube_cluster_name} > 0"
    },
    {
        "no": 17,
        "monitor_id": 116307149,
        "name": "[P2][Container] EKS({{cluster_name.name}} - {{eks_nodegroup-name.name}}.{{name.name}}) Network TX Error",
        "dynamodb_key": "CONTAINER-TX_ERROR-01",
        "query": "avg(last_5m):avg:kubernetes.network.tx_errors{cluster_name:sksh-argos-p-*} by {eks_nodegroup-name,cluster_name} >= 1"
    },
    {
        "no": 18,
        "monitor_id": 116308140,
        "name": "[P2][Container] EKS({{cluster_name.name}} - {{eks_nodegroup-name.name}}.{{name.name}} ) Network RX Drop",
        "dynamodb_key": "CONTAINER-RX_DROP-01",
        "query": "avg(last_5m):avg:kubernetes.network.rx_dropped{cluster_name:sksh-argos-p-*} by {name,eks_nodegroup-name,cluster_name} > 10"
    },
    {
        "no": 19,
        "monitor_id": 116368625,
        "name": "[P2][System] Host {{host.name}} - EBS failed - {{volume-name.name}}",
        "dynamodb_key": "SYSTEM-EC2_EBS-01",
        "query": "min(last_1m):max:aws.ebs.status.ok{volume-name:*} by {volume-name} < 1"
    },
    {
        "no": 20,
        "monitor_id": 116368997,
        "name": "[P2][System] Host {{name.name}} - CPU Utilization{{value}}  is high",
        "dynamodb_key": "SYSTEM-EC2_CPU-01",
        "query": "avg(last_1m):avg:system.cpu.user{host:sksh*} by {host} >= 100"
    },
    {
        "no": 21,
        "monitor_id": 116369384,
        "name": "[P2][System] Host {{name.name}} - MEM Utilization is high",
        "dynamodb_key": "SYSTEM-EC2_MEM-01",
        "query": "avg(last_5m):(1 - avg:system.mem.pct_usable{name:sksh-argos-p*} by {name}) * 100 >= 90"
    },
    {
        "no": 22,
        "monitor_id": 116370679,
        "name": "[P2][Container] EKS({{kube_cluster_name.name}}) - Node  {{host.name_tag}} disk usage over 85%",
        "dynamodb_key": "CONTAINER-EKS_DISK-01",
        "query": "avg(last_5m):avg:system.disk.used{cluster_name:sksh-argos-p*,device:/dev/nvme0n1p1} by {host,eks_nodegroup-name,kube_cluster_name} / avg:system.disk.total{cluster_name:sksh-argos-p*,device:/dev/nvme0n1p1} by {host,eks_nodegroup-name,kube_cluster_name} * 100 > 85"
    },
    {
        "no": 23,
        "monitor_id": 116371220,
        "name": "[P1][System] Host {{name.name}} - FS inode Usage is high",
        "dynamodb_key": "SYSTEM-EC2_INODE-01",
        "query": "avg(last_5m):avg:system.fs.inodes.in_use{name:sksh-argos-p*,device:/*} by {name,device} * 100 >= 90"
    },
    {
        "no": 24,
        "monitor_id": 116372293,
        "name": "[P2][System] Host {{host.name}} - Alert messages log - {{log.message}}",
        "dynamodb_key": "SYSTEM-EC2_INODE-01",
        "query": "events(\"Name:sksh-argos-p* filename:messages (\\\":emerg\\\" OR \\\":crit\\\" OR \\\":alert\\\" OR \\\"error: Operation\\\" OR \\\"kernel:err\\\")\").rollup(\"count\").by(\"host\").last(\"1m\") >= 1"
    },
    {
        "no": 25,
        "monitor_id": 116378535,
        "name": "[P2][Container] EKS ALB ({{loadbalancer.name}} ) Response Code(5xx) Cound is over 50 for 1min",
        "dynamodb_key": "CONTAINER-EKS_ALB-01",
        "query": "sum(last_1m):sum:aws.applicationelb.httpcode_target_5xx{loadbalancer:app/sksh-argos-p-eks-*} by {name,loadbalancer}.as_count() > 50"
    },
    {
        "no": 26,
        "monitor_id": 116390058,
        "name": "[P1][Network] DX Connection Down ({{connectionid.name}})",
        "dynamodb_key": "NETWORK-DX_DOWN-01",
        "query": "max(last_5m):avg:aws.dx.connection_state{aws_account:123456789012} by {connectionid} < 1"
    },
    {
        "no": 27,
        "monitor_id": 116394926,
        "name": "[P2][Network] TGW PacketDropCountNoRoute ({{transitgatewayattachment.name}})",
        "dynamodb_key": "NETWORK-TGW_DROP-01",
        "query": "sum(last_5m):sum:aws.transitgateway.packet_drop_count_no_route{transitgateway:tgw-055c4967d80e517e2} by {transitgatewayattachment}.as_count() > 100"
    },
    {
        "no": 28,
        "monitor_id": 116395484,
        "name": "[P2][Network] TGW PacketDropCountBlackhole ({{transitgatewayattachment.name}})",
        "dynamodb_key": "NETWORK-TGW_DROP-02",
        "query": "sum(last_5m):sum:aws.transitgateway.packet_drop_count_blackhole{transitgateway:tgw-055c4967d80e517e2} by {transitgatewayattachment}.as_count() > 100"
    },
    {
        "no": 29,
        "monitor_id": 116482346,
        "name": "[P2][CSP] MSK 디스크 사용량이 85% 이상 ({{value}})",
        "dynamodb_key": "CSP-MSK_DISK-01",
        "query": "avg(last_5m):avg:aws.kafka.kafka_data_logs_disk_used{*} > 85"
    },
    {
        "no": 30,
        "monitor_id": 116755768,
        "name": "[P2][Container] EKS({{kube_cluster_name.name}} ) - Job Failed ({{job_name.name}})",
        "dynamodb_key": "CONTAINER-EKS_JOB-01",
        "query": "avg(last_5m):avg:kubernetes_state.job.failed{kube_cluster_name:*} by {kube_job,kube_namespace,kube_cluster_name} > 1"
    },
    {
        "no": 31,
        "monitor_id": 116757521,
        "name": "[P2][Container] EKS Cluster({{kube_cluster_name.name}}) - Deploy Statefulset Check  {{kube_namespace.name}}/{{kube_stateful_set.name}}",
        "dynamodb_key": "CONTAINER-EKS_STATEFULSET-01",
        "query": "avg(last_5m):avg:kubernetes_state.statefulset.replicas_desired{kube_cluster_name:*} by {kube_cluster_name,kube_namespace,kube_stateful_set} - avg:kubernetes_state.statefulset.replicas_ready{kube_cluster_name:*} by {kube_cluster_name,kube_namespace,kube_stateful_set} > 0"
    },
    {
        "no": 32,
        "monitor_id": 116757851,
        "name": "[P3][Container] EKS({{kube_cluster_name.name}}) - POD Phase Abnormal {{kube_namespace.name}}/({{pod_name.name}}.{{value}}",
        "dynamodb_key": "CONTAINER-POD_ABNORMAL-01",
        "query": "avg(last_5m):sum:kubernetes_state.pod.status_phase{kube_cluster_name:*,!kube_namespace:management,!pod_phase:running} by {pod_phase,kube_namespace,kube_cluster_name,pod_name} > 2"
    },
    {
        "no": 33,
        "monitor_id": 116757949,
        "name": "[P2][Container] EKS({{kube_cluster_name.name}}) - POD Unschedulable ({{namespace.name}}/{{pod_name.name}})",
        "dynamodb_key": "CONTAINER-POD_UNSCHEDULABLE-01",
        "query": "avg(last_1m):avg:kubernetes_state.pod.scheduled{kube_cluster_name:*} by {pod_name,kube_namespace,kube_cluster_name} >= 1"
    },
    {
        "no": 34,
        "monitor_id": 116758637,
        "name": "[P2][Container] EKS({{cluster_name.name}}) - Node Instance is running on degraded hardware",
        "dynamodb_key": "CONTAINER-NODE_DEGRADED-01",
        "query": "events(\"The instance is running on degraded hardware\").rollup(\"count\").last(\"1m\") >= 1"
    },
    {
        "no": 35,
        "monitor_id": 116959074,
        "name": "[P1][DB] Aurora MySQL ({{dbinstanceidentifier.name}}  Temporary storage > 90%",
        "dynamodb_key": "DB-MYSQL_TEMPSTRORAGE-01",
        "query": "min(last_10m):avg:aws.rds.free_local_storage{dbinstanceidentifier:sksh-argos-p-aurora-mysql*} by {dbinstanceidentifier} / 1024 / 1024 / 1024 < 3"
    },
    {
        "no": 36,
        "monitor_id": 117577662,
        "name": "[P2][DB] MariaDB ({{dbinstanceidentifier.name}})  저장소 사용량이 높습니다.",
        "dynamodb_key": "DB-MARIADB_STRORAGE-01",
        "query": "avg(last_5m):(avg:aws.rds.free_storage_space{dbinstanceidentifier:sksh-argos-p-rds-mariadb-*} by {dbinstanceidentifier} / avg:aws.rds.total_storage_space{dbinstanceidentifier:sksh-argos-p-rds-mariadb-*} by {dbinstanceidentifier}) * 100 < 4"
    },
    {
        "no": 37,
        "monitor_id": 118410610,
        "name": "[P1][DB] 최근 5분 동안 MariaDB({{name.name}}) CPU 사용율이 90% 이상 입니다.",
        "dynamodb_key": "DB-MARIADB_CPU-01",
        "query": "avg(last_5m):avg:aws.rds.cpuutilization{dbinstanceidentifier:sksh-argos-p-rds-mariadb-*} by {name} > 90"
    },
    {
        "no": 38,
        "monitor_id": 118411054,
        "name": "[P1][DB] 최근 5분 동안 MySQL {{dbinstanceidentifier.name}} MAX CPU 사용율이 90% 입니다",
        "dynamodb_key": "DB-MARIADB_MAXCPU-01",
        "query": "avg(last_5m):max:aws.rds.cpuutilization{dbinstanceidentifier:sksh-argos-p-aurora-mysql-*} by {name} >= 90"
    },
    {
        "no": 39,
        "monitor_id": 119678033,
        "name": "[P1][SYSTEM] {{name.name}} - EC2 instance status failed",
        "dynamodb_key": "DB-MARIADB_MAXCPU-01",
        "query": "avg(last_5m):avg:aws.ec2.status_check_failed_instance{name:sksh-argos-p-*} by {name} > 0"
    },
    {
        "no": 40,
        "monitor_id": 122786203,
        "name": "[P2][SYSTEM] [{{host.name}}] EC2의 CPU 사용률이 높습니다.",
        "dynamodb_key": "SYSTEM-EC2_CPU-02",
        "query": "avg(last_5m):100 - avg:system.cpu.idle{host:sksh*} by {host} >= 90"
    },
]


def get_check_dtm():
    """
    Gets the current time in YYYY/MM/DD HH:MI:SS format.

    Returns:
    str: The current time in YYYY/MM/DD HH:MI:SS format.
    """

    # Seoul 시간대 객체 생성
    # seoul_timezone = pytz.timezone('Asia/Seoul')

    # 현재 시각을 Seoul 시간대로 가져옴
    # now = datetime.datetime.now(seoul_timezone)
    # timezone(timedelta(hours=9))
    # now = datetime.datetime.now( )
    now = datetime.datetime.now(timezone(timedelta(hours=9)))
    # return now.strftime('%Y/%m/%d %H:%M:%S')
    return now.strftime('%Y%m%d%H')




def check_status(monitor_id, headers):
    print(f"check_status({monitor_id})")


    # Set up the Datadog API endpoint
    url = f"https://api.datadoghq.com/api/v1/monitor/{monitor_id}"

    # Send the GET request to retrieve the monitor details
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        monitor_details = response.json( )
        # print(str(monitor_details) + "\n\n")
        # pprint(monitor_details)
        check_result_detail = monitor_details

        # Extract the monitor status
        name                   = monitor_details.get("name")
        priority               = monitor_details.get("priority")
        overall_state_modified = monitor_details.get("overall_state_modified")
        overall_state          = monitor_details.get("overall_state")

        # Check if the connection is up or down
        if overall_state == "OK":
            print(
                "# EventName: "
                + str(name)
                + "\n"
                + "# Priority: "
                + str(priority)
                + "\n"
                + "# Status: "
                + overall_state
                + "\n"
                + "# Status Modified: "
                + overall_state_modified
                + "\n"
            )
            check_result = 'Y'
        elif overall_state == 'No Data':
            check_result = 'D'
        else:
            print(f"Please Check the alert[{monitor_id}]")
            check_result = 'N'
    else:
        print("Failed to retrieve monitor details. Check your API keys and monitor ID.")
        check_result        = 'C'
        check_result_detail = { }

    return check_result, check_result_detail


def chk_monitor(lambda_url, table_name, no, monitor_id, check_dtm, headers):
    print(f"chk_monitor(lambda_url[{lambda_url}], table_name[{table_name}], no[{no}], monitor_id[{monitor_id}], check_dtm[{check_dtm}]")




    # Call the function to check the DX connection status
    check_result, check_result_detail = check_status(monitor_id, headers)
    print(f"check_result[{check_result}]")
    # print(f"check_result_detail[{check_result_detail}]")

    # id               = check_result_detail.get('id')
    priority         = check_result_detail.get('priority')
    monitor_name     = check_result_detail.get('name')

    # monitor_id       = '0' if id is None else str(id)
    monitor_priority = f"-" if priority is None else f"{priority}"

    # check_result_str = 'OK' if check_result == 'Y' else 'Not OK' if check_result == 'N' else '점검 오류'
    check_result_str = 'OK' if check_result == 'Y' else 'Not OK' if check_result == 'N' else 'No Data' if check_result == 'D' else '점검오류'


    return_code   = True
    # title         = f"{no}. {dynamodb_key}>{check_result_str}"
    title         = ""
    # check_dtm     = get_check_dtm( )
    check_url_str = f'{lambda_url}?check_dtm={check_dtm}&monitor_id={monitor_id}'
    # value         = f"`<{check_url_str}|상세점검결과보기>`"
    value         = f"{no}. {monitor_id} `<{check_url_str}|{check_result_str}>`"



    # { 'check_dtm':    'S' }
    # { 'monitor_id':   'S' }
    # { 'monitor_priority':  'S' }
    # { 'monitor_name': 'S' }
    # { 'check_result': 'S' }
    data = {
        'check_dtm': check_dtm,
        'monitor_id': '-' if monitor_id is None else str(monitor_id),
        'monitor_priority': monitor_priority,
        'monitor_name': '-' if monitor_name is None else monitor_name,
        'check_result': check_result_str
    }


    # resource_id = 'NETWORK-DX-01'
    result = dydb_helper.put_item(table_name, data, check_result_detail)
    if result:
        return_code   = True
    else:
        value         = f"~결과 저장 실패~"
        return_code   = False
        check_result  = 'F'

    # Send the message to Slack.
    # slack_helper.send_message(slack_msg, check_url_str)        

    # html_str = "SUCCESS"
    slack_dict = {
        # "title": title,
        "value": value,
        "short": "false"
    }

    # 'Y' : OK
    # 'N' : Not OK
    # 'D' : No Data
    # 'F' : DynamoDB Insert 오류

    return check_result, slack_dict

def check_alerts(lambda_url, table_name):
    slack_fields = []
    result_cnt   = {}
    check_dtm    = get_check_dtm( )

    datadog_helper.init_datadog_session( )
    api_key, app_key, public_id = datadog_helper.get_datadog_keys()

    # Set the headers with the API and application keys
    headers = {
        "Content-Type": "application/json",
        "DD-API-KEY": api_key,
        "DD-APPLICATION-KEY": app_key,
    }
    print(f"headers[{headers}]")


    for alert in datadog_alerts:
        no           = alert['no']
        monitor_id   = alert['monitor_id']       
        # dynamodb_key = alert['dynamodb_key']
        print(f"{no}. Monitor ID: {monitor_id}, check_dtm:[{check_dtm}]")

        # "fields":[
        #     {
        #         "title":"자원 점검 수행",
        #         "value": text,
        #         "short": "false"
        #     }
        # ],
        check_result, result_dict = chk_monitor(lambda_url, table_name, no, monitor_id, check_dtm, headers)

        slack_fields.append(result_dict)
        check_result_str = 'OK' if check_result == 'Y' else 'Not OK' if check_result == 'N' else 'No Data' if check_result == 'D' else '점검오류'
        result_cnt[check_result_str] = result_cnt.get(check_result_str, 0) + 1


    text = "Argos 자원 점검수행[_"

    size = len(result_cnt)
    cnt  = 0
    for key, value in result_cnt.items( ):
        text += f"{key}:{value}"
        cnt += 1
        if cnt < size:
            text += ", "
            
    text += "_]"


    # Send the message to Slack.
    slack_helper.init_slack_webhook( )
    slack_helper.send_message(text, slack_fields)      

if __name__ == "__main__":
    # Enter the monitor ID associated with the DX connection status monitor
    monitor_id = "116390058"
    lambda_url = "https://uvr5meln3nmynytlbanfzg7j5u0mkbvn.lambda-url.ap-northeast-2.on.aws/"
    # Call the function to check the DX connection status
    # slack_helper.init_slack_webhook( )
    check_alerts(lambda_url, table_name)
