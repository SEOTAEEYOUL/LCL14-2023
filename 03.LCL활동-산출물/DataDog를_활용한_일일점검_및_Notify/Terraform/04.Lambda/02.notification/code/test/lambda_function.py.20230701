from urllib.request import Request, urlopen, URLError, HTTPError
import urllib.request
import json
import os
import datetime
import time
from datetime import timedelta, timezone
# import pytz

import boto3
from botocore.exceptions import ClientError


SLACK_WEBHOOK_URL = os.environ.get('SLACK_WEBHOOK_URL')
SLACK_CHANNEL     = os.environ.get('SLACK_CHANNEL')

slack_mag         = "매우 중요한 알림이 있습니다!"
result            = "<H1>매우 중요한 알림이 있습니다!</H1>"

print(f"SLACK_WEBHOOK_URL[{SLACK_WEBHOOK_URL}]")
print(f"SLACK_CHANNEL[{SLACK_CHANNEL}]")


def get_current_time():
    """
    Gets the current time in YYYY/MM/DD HH:MI:SS format.

    Returns:
    str: The current time in YYYY/MM/DD HH:MI:SS format.
    """

    # Seoul 시간대 객체 생성
    # seoul_timezone = pytz.timezone('Asia/Seoul')

    # 현재 시각을 Seoul 시간대로 가져옴
    # now = datetime.datetime.now(seoul_timezone)
    # timezone(timedelta(hours=9))
    # now = datetime.datetime.now( )
    now = datetime.datetime.now(timezone(timedelta(hours=9)))
    return now.strftime('%Y/%m/%d %H:%M:%S')

def send_message_to_slack(text, lambda_url):
    print(f"text[{text}]")
    # url = "https://hooks.slack.com/services/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"
    url = SLACK_WEBHOOK_URL
    cur_time_str = get_current_time()

    # payload = {
    #     "username": "L2운영/T Biz Cloud",
    #     "channel": SLACK_CHANNEL,
    #     "icon_emoji": ":whale:", # ":satellite:"
    #     "text" : text
    # }

    current_timestamp = int(time.time())

    payload = {
        "username": "L2운영/T Biz Cloud", # 보내는 사람 이름
        "channel": SLACK_CHANNEL,
        "icon_emoji": ":whale:",
        "attachments": [
            {
                "fallback": "Argos 자원 체크 결과",
                "pretext": "Argos 자원 체크 결과",
                "author_name": "L2운영/T Biz Cloud",
                "author_link": "https://app.datadoghq.com/dashboard/xus-d8b-sej/skcc-argos-tf?from_ts=1687671409331&to_ts=1687685809331&live=true",
                "author_icon": "https://docs.datadoghq.com/",
                "title": "Argos 자원 체크 결과.",
                "title_link": lambda_url,
                "text": "Argos 자원 체크 결과",
                "color": "#9733EE",
                "fields": [
                    {
                        "title": "시간",
                        "value": cur_time_str,
                        "short": "false",
                    },
                    {
                        "title": "상태",
                        "value": "OK!!!",
                        "short": "false",
                    },
                    {
                        "title": "운영 상황 체크!",
                        "value": text,
                        "short": "false",
                    }
                ],
                "image_url": "http://my-website.com/path/to/image.jpg",
                "thumb_url": "http://example.com/path/to/thumb.png",
                "footer": "L2운영/T Biz Cloud",
                "footer_icon": "https://platform.slack-edge.com/img/default_application_icon.png",
                "ts": current_timestamp
            }
        ]
    }
    print(f"payload[{payload}]")
    send_text = json.dumps(payload)
    print(f"send_text[{send_text}]")

    # Create the request object.
    request   = urllib.request.Request(
        url, 
        data = send_text.encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    # Send the request.
    with urllib.request.urlopen(request) as response:
        slack_message = response.read()

def send_to_slack(message, webhookurl):
    slack_message = message
    req = Request(webhookurl, data=json.dumps(slack_message).encode("utf-8"),
                  headers={'content-type': 'application/json'})
    try:
        response = urlopen(req)
        response.read()
    except HTTPError as e:
        print("Request failed : ", e.code, e.reason)
    except URLError as e:
        print("Server connection failed: ", e.reason, e.reason)

def s3_get_html(s3_bucket_name, s3_object_key):
    print(f"s3_get_html - s3_bucket_name[{s3_bucket_name}] s3_object_key[{s3_object_key}]")
    # S3 객체를 읽어옴
    s3 = boto3.resource('s3')
    obj = s3.Object(s3_bucket_name, s3_object_key)
    html_content = obj.get()['Body'].read().decode('utf-8')
    print(f"s3_get_html - s3_bucket_name[{s3_bucket_name}] s3_object_key[{s3_object_key}]\nhtml_content[{html_content}]")

    return html_content

# 쿼리 결과를 테이블 형태로 변환하는 함수
def create_html_table(items):
    print(f'create_html_table[{items}]')
    table_html = '<table>\n'
    table_html += '<tr><th>Resource ID</th><th>Check DTM</th><th>check_result</th><th>check_result_detail</th></tr>\n'
    for item in items:
        resource_id = item['resource_id']
        check_dtm = item['check_dtm']
        # 다른 열 데이터도 필요한 경우 해당 열의 키를 가져와서 item에서 값을 추출
        check_result = item['check_result']
        check_result_str = 'OK' if check_result == 'Y' else 'Not OK' if check_result == 'N' else '점검 오류'
        check_result_detail = item['check_result_detail']
        
        # 테이블 행 생성
        row_html = f'<tr><td>{resource_id}</td><td>{check_dtm}</td><td>{check_result_str}</td><td><pre>{check_result_detail}</pre></td></tr>\n'
        table_html += row_html
    
    table_html += '</table>'

    print(f"table_html[{table_html}]")
    return table_html

def dynamodb_get_html(table_name):
    print(f"dynamodb_get_html(table_name[{table_name}])")
    # DynamoDB 테이블과 S3 버킷 설정
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(table_name)
    
    # 오늘 날짜를 가져옴 (YYYY-MM-DD 형식)
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    print(f"dynamodb_get_html(table_name[{table_name}])")

    # DynamoDB에서 조건에 맞는 항목 쿼리
    # response = table.scan(
    #     FilterExpression='resource_id = :id and check_dtm = :date',
    #     ExpressionAttributeValues={
    #         ':id': '1',
    #         # ':date': today
    #     }
    # )

    # response = dynamodb.scan(
    #     TableName=table_name,
    #     # 필요에 따라 다른 옵션을 추가할 수 있습니다.
    #     # 예: Limit, FilterExpression 등
    # )
    response = table.scan( )

    # 쿼리 결과를 테이블 형태로 변환하여 HTML 템플릿에 삽입
    table_html = create_html_table(response['Items'])

    return table_html

def lambda_handler(event, context):
    """
    Lambda function handler.

    Args:
        event (dict): The event object.
        context (dict): The context object.
    """

    print('## ENVIRONMENT VARIABLES')
    print(os.environ['AWS_LAMBDA_LOG_GROUP_NAME'])
    print(os.environ['AWS_LAMBDA_LOG_STREAM_NAME'])
    print('## EVENT')
    
    print(event)
    print(json.dumps(event, indent=2))


    # S3 버킷 및 파일 정보
    s3_bucket_name = "s3-bucket-lcl14"
    # s3_object_key  = "index.html"
    s3_object_key  = "system_check.html"
    
    # DynamoDB 테이블 정보
    dynamodb_table_name = "dynamodb_system_check_lcl14"

    # dynamodb_key        = "index.html"
    dynamodb_key        = "1"

    # Access specific fields within the payload
    # Get the lambda_url text.
    if 'lambda_url' in event:
        # print(event['lambda_url'])
        LAMBDA_URL = event['lambda_url']
        # print(f"LAMBDA_URL[{LAMBDA_URL}] ++++++++++++++")
        slack_msg = f"*Argos* _상태체크_ 를 하였습니다.! 자세히 알아보려면 `<{LAMBDA_URL}|여기를 클릭>`하세요."
        # result    = f'<H1>Lambda에서 Slack으로 보내는 메시지 입니다.! </H1> </br> <H2> 자세히 알아보려면 <a href="{LAMBDA_URL}"> 여기를 클릭</a> 하세요.</H2>'
        result = "Success"


        # print(f"slack_msg[{slack_msg}] 11111111111111111111111111111111")
        # print(f"result[{result}] 22222222222222222222222222222")
        
        
        # Send the message to Slack.
        # send_to_slack(slack_msg, SLACK_WEBHOOK_URL)
        send_message_to_slack(slack_msg, LAMBDA_URL)
    else:
        # s3_bucket_name = "s3-bucket-lcl14"
        # s3_object_key  = "system_check.html"
        # dynamodb_table_name = "dynamodb_system_check_lcl14"
        html_template = s3_get_html(s3_bucket_name, s3_object_key)
        table_html    = dynamodb_get_html(dynamodb_table_name)
        cur_time_str  = get_current_time()

        result = html_template.replace('{{table_content}}', table_html).replace('{{date}}', cur_time_str)

        # 결과 HTML을 S3에 저장 (선택 사항)
        # output_key = 'output.html'
        # s3.Object(bucket_name, output_key).put(Body=final_html, ContentType='text/html')

    # Return a response if needed
    return {
        'statusCode' : 200,
        'body': result,
        'headers': {'Content-Type': 'text/html'}
    }

if __name__ == "__main__":
  LAMBDA_URL        = os.environ.get('LAMBDA_URL')
  send_message_to_slack(f"매우 중요한 알림이 있습니다! 자세히 알아보려면 <{LAMBDA_URL}|여기를 클릭>하세요.")
