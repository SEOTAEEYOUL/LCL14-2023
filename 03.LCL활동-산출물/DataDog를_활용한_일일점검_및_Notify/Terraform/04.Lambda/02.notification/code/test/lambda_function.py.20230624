from urllib.request import Request, urlopen, URLError, HTTPError
import urllib.request
import json
import os
import datetime

import boto3
from botocore.exceptions import ClientError



SLACK_WEBHOOK_URL = os.environ.get('SLACK_WEBHOOK_URL')
SLACK_CHANNEL     = os.environ.get('SLACK_CHANNEL')

slack_mag         = "매우 중요한 알림이 있습니다!"
result            = "<H1>매우 중요한 알림이 있습니다!</H1>"

print(f"SLACK_WEBHOOK_URL[{SLACK_WEBHOOK_URL}]")
print(f"SLACK_CHANNEL[{SLACK_CHANNEL}]")


def get_current_time():
  """
  Gets the current time in YYYY/MM/DD HH:MI:SS format.

  Returns:
    str: The current time in YYYY/MM/DD HH:MI:SS format.
  """

  now = datetime.datetime.now()
  return now.strftime('%Y/%m/%d %H:%M:%S')

def send_message_to_slack(text):
    print(f"text[{text}]")
    # url = "https://hooks.slack.com/services/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"
    url = SLACK_WEBHOOK_URL
    cur_time_str = get_current_time()

    # payload = {
    #     "username": "L2운영/T Biz Cloud",
    #     "channel": SLACK_CHANNEL,
    #     "icon_emoji": ":whale:",
    #     "text" : text
    # }


    payload = {
        "username": "L2운영/T Biz Cloud", # 보내는 사람 이름
        "channel": SLACK_CHANNEL,
        "icon_emoji": ":satellite:",
        "attachments": [
            {
                "color": "#9733EE",
                "fields": [
                    {
                        "title": "시간",
                        "value": cur_time_str,
                        "short": "false",
                    },
                    {
                        "title": "상태",
                        "value": "OK!!!",
                        "short": "false",
                    },
                    {
                        "title": "운영 상황 체크!",
                        "value": text,
                        "short": "false",
                    }
                ]
            }
        ]
    }
    print(f"payload[{payload}]")
    send_text = json.dumps(payload)
    print(f"send_text[{send_text}]")

    # Create the request object.
    request   = urllib.request.Request(
        url, 
        data = send_text.encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    # Send the request.
    with urllib.request.urlopen(request) as response:
        slack_message = response.read()

def send_to_slack(message, webhookurl):
    slack_message = message
    req = Request(webhookurl, data=json.dumps(slack_message).encode("utf-8"),
                  headers={'content-type': 'application/json'})
    try:
        response = urlopen(req)
        response.read()
    except HTTPError as e:
        print("Request failed : ", e.code, e.reason)
    except URLError as e:
        print("Server connection failed: ", e.reason, e.reason)

def lambda_handler(event, context):
    """
    Lambda function handler.

    Args:
        event (dict): The event object.
        context (dict): The context object.
    """

    print('## ENVIRONMENT VARIABLES')
    print(os.environ['AWS_LAMBDA_LOG_GROUP_NAME'])
    print(os.environ['AWS_LAMBDA_LOG_STREAM_NAME'])
    print('## EVENT')
    
    print(event)
    print(json.dumps(event, indent=2))

    # Access specific fields within the payload
    # Get the lambda_url text.
    if 'lambda_url' in event:
        # print(event['lambda_url'])
        LAMBDA_URL = event['lambda_url']
        # print(f"LAMBDA_URL[{LAMBDA_URL}] ++++++++++++++")
        slack_msg = f"*Argos* _상태체크_ 를 하였습니다.! 자세히 알아보려면 `<{LAMBDA_URL}|여기를 클릭>`하세요."
        # result    = f'<H1>Lambda에서 Slack으로 보내는 메시지 입니다.! </H1> </br> <H2> 자세히 알아보려면 <a href="{LAMBDA_URL}"> 여기를 클릭</a> 하세요.</H2>'
        result = "Success"


        # print(f"slack_msg[{slack_msg}] 11111111111111111111111111111111")
        # print(f"result[{result}] 22222222222222222222222222222")
        
        
        # Send the message to Slack.
        # send_to_slack(slack_msg, SLACK_WEBHOOK_URL)
        send_message_to_slack(slack_msg)
    else:
        message_text = f"운영 알림 메시지 화면 </br> 현재 화면은 Slack 에서 클릭할 때 나오는 화면 입니다."
        # Get the HTML result.
        html_result = """
        <html>
        <head>
        <title>Lambda Function Result</title>
        <meta charset="utf-8">
        </head>
        <body>
        <h1>The Lambda function has completed successfully.</h1>
        <p>The message text was:</p>
        <p>{message_text}</p>
        </body>
        </html>
        """.format(message_text=message_text)
        result = html_result

    # Return a response if needed
    return {
        'statusCode' : 200,
        'body': result,
        'headers': {'Content-Type': 'text/html'}
    }

if __name__ == "__main__":
  LAMBDA_URL        = os.environ.get('LAMBDA_URL')
  send_message_to_slack(f"매우 중요한 알림이 있습니다! 자세히 알아보려면 <{LAMBDA_URL}|여기를 클릭>하세요.")

